"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.unionwith"));

var _optionator = _interopRequireDefault(require("optionator"));

var _lodash2 = _interopRequireDefault(require("lodash.kebabcase"));

var _logger = require("../logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const logger = (0, _logger.createLogger)('options');
const settings = {
  prepend: 'esw [options] [file.js ...] [dir ...]',
  concatRepeatedArrays: true,
  mergeRepeatedObjects: true
};
const defaultOptions = [{
  heading: 'ESW Options'
}, {
  option: 'help',
  alias: 'h',
  type: 'Boolean',
  description: 'Show help'
}, {
  option: 'watch',
  alias: 'w',
  type: 'Boolean',
  description: 'Enable file watch'
}, {
  option: 'changed',
  type: 'Boolean',
  description: 'Enables single file linting while watch is enabled'
}, {
  option: 'clear',
  type: 'Boolean',
  description: 'Clear terminal when running lint'
}, {
  option: 'version',
  type: 'Boolean',
  alias: 'v',
  description: 'Prints Eslint-Watch Version'
}, {
  option: 'versions',
  type: 'Boolean',
  description: 'Prints Eslint-Watch and Eslint Versions'
}, {
  option: 'watch-ignore',
  type: 'RegExp',
  description: 'Regex string of folders to ignore when watching - default: /.git|node_modules|bower_components/'
}, {
  option: 'watch-delay',
  type: 'Int',
  description: 'Delay(ms) for watcher to wait to trigger re-lint',
  default: '300'
}, {
  heading: 'Basic configuration'
}, {
  option: 'ext',
  type: '[String]',
  description: 'Specify JavaScript file extensions',
  default: '.js'
}];

function areEqual(opt1, opt2) {
  if (opt1.heading && opt2.heading) {
    return opt1.heading === opt2.heading;
  }

  return opt1.alias === opt2.alias && opt1.option === opt2.option && opt1.type === opt2.type;
}

var _default = {
  get eswOptions() {
    return [...defaultOptions];
  },

  createOptions(eswOptions, eslintOptions = []) {
    const mergedOptions = (0, _lodash.default)(eswOptions, eslintOptions, areEqual);
    logger.debug(mergedOptions);
    const opsor = (0, _optionator.default)(_objectSpread({}, settings, {
      options: mergedOptions
    }));
    return {
      helpText: opsor.generateHelp(),

      parse(rawArgs) {
        const options = opsor.parse(rawArgs, {
          slice: 0
        });
        const dirs = options._;

        if (dirs.length === 0) {
          dirs.push(_path.default.resolve('.'));
        }

        options._ = dirs;
        return options;
      }

    };
  },

  getCli(options) {
    const eswKeys = ['watch', 'versions', 'version', 'clear', 'changed', 'watchIgnore', 'watchDelay'];
    return Object.entries(options).reduce((acc, [key, value]) => {
      if (eswKeys.includes(key)) {
        return acc;
      }

      if (key === '_') {
        return acc;
      }

      if (key === 'rule') {
        Object.keys(value).forEach(ruleKey => {
          acc.flags.push('--rule', `${ruleKey}: ${JSON.stringify(value[ruleKey]).replace(/"/g, '')}`);
        });
        return acc;
      }

      if (typeof value === 'boolean') {
        acc.flags.push(`--${value ? '' : 'no-'}${(0, _lodash2.default)(key)}`);
      } else {
        acc.flags.push(`--${(0, _lodash2.default)(key)}`);
        acc.flags.push(value);
      }

      return acc;
    }, {
      flags: [],
      dirs: options._ || []
    });
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,