"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _logger = _interopRequireDefault(require("../logger"));

var _execa = _interopRequireDefault(require("execa"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eslint = {
  async getHelpOptions() {
    const helpText = await eslint.execute(['--help']);
    return _parser.default.parseHelp(helpText);
  },

  async execute(args = []) {
    const logger = _logger.default.createLogger('eslint');

    logger.debug('Executing %o', args);

    try {
      const result = await (0, _execa.default)('eslint', args);
      logger.debug(result);
      return result.stdout;
    } catch (error) {
      logger.debug(error);
      throw new Error(error.stdout || error.stderr);
    }
  },

  async lint(args = [], cliOpts = {}) {
    const logger = _logger.default.createLogger('eslint');

    try {
      let endLine = '';
      const results = await eslint.execute(args);

      if (!results.trim()) {
        if (!cliOpts.quiet) {
          logger.log(`âœ“ Clean (${new Date().toLocaleTimeString()})`);
        }

        return;
      }

      if (!/\\n{2}$/.test(results)) {
        endLine = '\n';
      }

      logger.log(`${results}${endLine}`);
    } catch (error) {
      logger.error(error.message.trim());
    }
  }

};
var _default = eslint;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lc2xpbnQvaW5kZXguanMiXSwibmFtZXMiOlsiZXNsaW50IiwiZ2V0SGVscE9wdGlvbnMiLCJoZWxwVGV4dCIsImV4ZWN1dGUiLCJwYXJzZXIiLCJwYXJzZUhlbHAiLCJhcmdzIiwibG9nZ2VyIiwiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiZGVidWciLCJyZXN1bHQiLCJzdGRvdXQiLCJlcnJvciIsIkVycm9yIiwic3RkZXJyIiwibGludCIsImNsaU9wdHMiLCJlbmRMaW5lIiwicmVzdWx0cyIsInRyaW0iLCJxdWlldCIsImxvZyIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ0ZXN0IiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2IsUUFBTUMsY0FBTixHQUF1QjtBQUNyQixVQUFNQyxRQUFRLEdBQUcsTUFBTUYsTUFBTSxDQUFDRyxPQUFQLENBQWUsQ0FBQyxRQUFELENBQWYsQ0FBdkI7QUFFQSxXQUFPQyxnQkFBT0MsU0FBUCxDQUFpQkgsUUFBakIsQ0FBUDtBQUNELEdBTFk7O0FBTWIsUUFBTUMsT0FBTixDQUFjRyxJQUFJLEdBQUcsRUFBckIsRUFBeUI7QUFDdkIsVUFBTUMsTUFBTSxHQUFHQyxnQkFBT0MsWUFBUCxDQUFvQixRQUFwQixDQUFmOztBQUVBRixJQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYSxjQUFiLEVBQTZCSixJQUE3Qjs7QUFFQSxRQUFJO0FBQ0YsWUFBTUssTUFBTSxHQUFHLE1BQU0sb0JBQU0sUUFBTixFQUFnQkwsSUFBaEIsQ0FBckI7QUFFQUMsTUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWFDLE1BQWI7QUFFQSxhQUFPQSxNQUFNLENBQUNDLE1BQWQ7QUFDRCxLQU5ELENBTUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2ROLE1BQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhRyxLQUFiO0FBRUEsWUFBTSxJQUFJQyxLQUFKLENBQVVELEtBQUssQ0FBQ0QsTUFBTixJQUFnQkMsS0FBSyxDQUFDRSxNQUFoQyxDQUFOO0FBQ0Q7QUFDRixHQXRCWTs7QUF1QmIsUUFBTUMsSUFBTixDQUFXVixJQUFJLEdBQUcsRUFBbEIsRUFBc0JXLE9BQU8sR0FBRyxFQUFoQyxFQUFvQztBQUNsQyxVQUFNVixNQUFNLEdBQUdDLGdCQUFPQyxZQUFQLENBQW9CLFFBQXBCLENBQWY7O0FBRUEsUUFBSTtBQUNGLFVBQUlTLE9BQU8sR0FBRyxFQUFkO0FBQ0EsWUFBTUMsT0FBTyxHQUFHLE1BQU1uQixNQUFNLENBQUNHLE9BQVAsQ0FBZUcsSUFBZixDQUF0Qjs7QUFFQSxVQUFJLENBQUNhLE9BQU8sQ0FBQ0MsSUFBUixFQUFMLEVBQXFCO0FBQ25CLFlBQUksQ0FBQ0gsT0FBTyxDQUFDSSxLQUFiLEVBQW9CO0FBQ2xCZCxVQUFBQSxNQUFNLENBQUNlLEdBQVAsQ0FBWSxZQUFXLElBQUlDLElBQUosR0FBV0Msa0JBQVgsRUFBZ0MsR0FBdkQ7QUFDRDs7QUFDRDtBQUNEOztBQUVELFVBQUksQ0FBQyxVQUFVQyxJQUFWLENBQWVOLE9BQWYsQ0FBTCxFQUE4QjtBQUM1QkQsUUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDRDs7QUFFRFgsTUFBQUEsTUFBTSxDQUFDZSxHQUFQLENBQVksR0FBRUgsT0FBUSxHQUFFRCxPQUFRLEVBQWhDO0FBQ0QsS0FoQkQsQ0FnQkUsT0FBT0wsS0FBUCxFQUFjO0FBQ2ROLE1BQUFBLE1BQU0sQ0FBQ00sS0FBUCxDQUFhQSxLQUFLLENBQUNhLE9BQU4sQ0FBY04sSUFBZCxFQUFiO0FBQ0Q7QUFDRjs7QUE3Q1ksQ0FBZjtlQWdEZXBCLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2VyIGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBleGVjYSBmcm9tICdleGVjYSc7XG5cbmNvbnN0IGVzbGludCA9IHtcbiAgYXN5bmMgZ2V0SGVscE9wdGlvbnMoKSB7XG4gICAgY29uc3QgaGVscFRleHQgPSBhd2FpdCBlc2xpbnQuZXhlY3V0ZShbJy0taGVscCddKTtcblxuICAgIHJldHVybiBwYXJzZXIucGFyc2VIZWxwKGhlbHBUZXh0KTtcbiAgfSxcbiAgYXN5bmMgZXhlY3V0ZShhcmdzID0gW10pIHtcbiAgICBjb25zdCBsb2dnZXIgPSBMb2dnZXIuY3JlYXRlTG9nZ2VyKCdlc2xpbnQnKTtcblxuICAgIGxvZ2dlci5kZWJ1ZygnRXhlY3V0aW5nICVvJywgYXJncyk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXhlY2EoJ2VzbGludCcsIGFyZ3MpO1xuXG4gICAgICBsb2dnZXIuZGVidWcocmVzdWx0KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdC5zdGRvdXQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhlcnJvcik7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5zdGRvdXQgfHwgZXJyb3Iuc3RkZXJyKTtcbiAgICB9XG4gIH0sXG4gIGFzeW5jIGxpbnQoYXJncyA9IFtdLCBjbGlPcHRzID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIgPSBMb2dnZXIuY3JlYXRlTG9nZ2VyKCdlc2xpbnQnKTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgZW5kTGluZSA9ICcnO1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGVzbGludC5leGVjdXRlKGFyZ3MpO1xuXG4gICAgICBpZiAoIXJlc3VsdHMudHJpbSgpKSB7XG4gICAgICAgIGlmICghY2xpT3B0cy5xdWlldCkge1xuICAgICAgICAgIGxvZ2dlci5sb2coYOKckyBDbGVhbiAoJHtuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpfSlgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghL1xcXFxuezJ9JC8udGVzdChyZXN1bHRzKSkge1xuICAgICAgICBlbmRMaW5lID0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5sb2coYCR7cmVzdWx0c30ke2VuZExpbmV9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlcnJvci5tZXNzYWdlLnRyaW0oKSk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZXNsaW50O1xuIl19