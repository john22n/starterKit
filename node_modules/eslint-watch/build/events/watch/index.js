"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _chokidar = _interopRequireDefault(require("./chokidar"));

var _logger = require("../../logger");

var _eslint = _interopRequireDefault(require("../../eslint"));

var _keyListener = _interopRequireDefault(require("./key-listener"));

var _clear = _interopRequireDefault(require("../../commands/clear"));

var _options = _interopRequireDefault(require("../../cli/options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.createLogger)('events:watch');

async function lint(options = {}, eslintArgs = []) {
  if (options.clear) {
    /* istanbul ignore next */
    logger.log(_clear.default.run());
  }

  await _eslint.default.lint(eslintArgs, options);
}

var _default = {
  listen(opts) {
    const watcher = _chokidar.default.createWatcher(opts._, {
      ignored: opts.watchIgnore
    });

    const {
      flags,
      dirs
    } = _options.default.getCli(opts);

    const cacheLocation = _path.default.relative(process.cwd(), _path.default.resolve(opts.cacheLocation || '.eslintcache'));

    _keyListener.default.listen(['enter'], async () => {
      await lint(opts, [...flags, ...dirs]);
    });

    return watcher.on('ready', async () => {
      logger.debug('Ready');
      await lint(opts, [...flags, ...dirs]);
    })
    /* istanbul ignore next */
    .on('add', dir => logger.debug(`${dir} added.`)).on('change', (0, _lodash.default)(async filePath => {
      if (cacheLocation === filePath) return;

      if (!opts.ext.includes(_path.default.extname(filePath))) {
        logger.debug(`Watch: Skipping ${filePath}`);
        return;
      }

      logger.debug('Detected change:', filePath);
      const changed = opts.changed ? [filePath] : opts._;
      await lint(opts, [...flags, ...changed]);
    }), opts.watchDelay || 300)
    /* istanbul ignore next */
    .on('error', err => logger.error(err));
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvd2F0Y2gvaW5kZXguanMiXSwibmFtZXMiOlsibG9nZ2VyIiwibGludCIsIm9wdGlvbnMiLCJlc2xpbnRBcmdzIiwiY2xlYXIiLCJsb2ciLCJydW4iLCJlc2xpbnQiLCJsaXN0ZW4iLCJvcHRzIiwid2F0Y2hlciIsIndhdGNoIiwiY3JlYXRlV2F0Y2hlciIsIl8iLCJpZ25vcmVkIiwid2F0Y2hJZ25vcmUiLCJmbGFncyIsImRpcnMiLCJjbGkiLCJnZXRDbGkiLCJjYWNoZUxvY2F0aW9uIiwicGF0aCIsInJlbGF0aXZlIiwicHJvY2VzcyIsImN3ZCIsInJlc29sdmUiLCJrZXkiLCJvbiIsImRlYnVnIiwiZGlyIiwiZmlsZVBhdGgiLCJleHQiLCJpbmNsdWRlcyIsImV4dG5hbWUiLCJjaGFuZ2VkIiwid2F0Y2hEZWxheSIsImVyciIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUcsMEJBQWEsY0FBYixDQUFmOztBQUVBLGVBQWVDLElBQWYsQ0FBb0JDLE9BQU8sR0FBRyxFQUE5QixFQUFrQ0MsVUFBVSxHQUFHLEVBQS9DLEVBQW1EO0FBQ2pELE1BQUlELE9BQU8sQ0FBQ0UsS0FBWixFQUFtQjtBQUNqQjtBQUNBSixJQUFBQSxNQUFNLENBQUNLLEdBQVAsQ0FBV0QsZUFBTUUsR0FBTixFQUFYO0FBQ0Q7O0FBRUQsUUFBTUMsZ0JBQU9OLElBQVAsQ0FBWUUsVUFBWixFQUF3QkQsT0FBeEIsQ0FBTjtBQUNEOztlQUVjO0FBQ2JNLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBRCxFQUFPO0FBQ1gsVUFBTUMsT0FBTyxHQUFHQyxrQkFBTUMsYUFBTixDQUFvQkgsSUFBSSxDQUFDSSxDQUF6QixFQUE0QjtBQUFFQyxNQUFBQSxPQUFPLEVBQUVMLElBQUksQ0FBQ007QUFBaEIsS0FBNUIsQ0FBaEI7O0FBQ0EsVUFBTTtBQUFFQyxNQUFBQSxLQUFGO0FBQVNDLE1BQUFBO0FBQVQsUUFBa0JDLGlCQUFJQyxNQUFKLENBQVdWLElBQVgsQ0FBeEI7O0FBQ0EsVUFBTVcsYUFBYSxHQUFHQyxjQUFLQyxRQUFMLENBQWNDLE9BQU8sQ0FBQ0MsR0FBUixFQUFkLEVBQTZCSCxjQUFLSSxPQUFMLENBQWFoQixJQUFJLENBQUNXLGFBQUwsSUFBc0IsY0FBbkMsQ0FBN0IsQ0FBdEI7O0FBRUFNLHlCQUFJbEIsTUFBSixDQUFXLENBQUMsT0FBRCxDQUFYLEVBQXNCLFlBQVk7QUFDaEMsWUFBTVAsSUFBSSxDQUFDUSxJQUFELEVBQU8sQ0FBQyxHQUFHTyxLQUFKLEVBQVcsR0FBR0MsSUFBZCxDQUFQLENBQVY7QUFDRCxLQUZEOztBQUlBLFdBQ0VQLE9BQU8sQ0FDSmlCLEVBREgsQ0FDTSxPQUROLEVBQ2UsWUFBWTtBQUN2QjNCLE1BQUFBLE1BQU0sQ0FBQzRCLEtBQVAsQ0FBYSxPQUFiO0FBQ0EsWUFBTTNCLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR08sS0FBSixFQUFXLEdBQUdDLElBQWQsQ0FBUCxDQUFWO0FBQ0QsS0FKSDtBQUtFO0FBTEYsS0FNR1UsRUFOSCxDQU1NLEtBTk4sRUFNY0UsR0FBRCxJQUFTN0IsTUFBTSxDQUFDNEIsS0FBUCxDQUFjLEdBQUVDLEdBQUksU0FBcEIsQ0FOdEIsRUFPR0YsRUFQSCxDQVFJLFFBUkosRUFTSSxxQkFBUyxNQUFPRyxRQUFQLElBQW9CO0FBQzNCLFVBQUlWLGFBQWEsS0FBS1UsUUFBdEIsRUFBZ0M7O0FBQ2hDLFVBQUksQ0FBQ3JCLElBQUksQ0FBQ3NCLEdBQUwsQ0FBU0MsUUFBVCxDQUFrQlgsY0FBS1ksT0FBTCxDQUFhSCxRQUFiLENBQWxCLENBQUwsRUFBZ0Q7QUFDOUM5QixRQUFBQSxNQUFNLENBQUM0QixLQUFQLENBQWMsbUJBQWtCRSxRQUFTLEVBQXpDO0FBQ0E7QUFDRDs7QUFFRDlCLE1BQUFBLE1BQU0sQ0FBQzRCLEtBQVAsQ0FBYSxrQkFBYixFQUFpQ0UsUUFBakM7QUFDQSxZQUFNSSxPQUFPLEdBQUd6QixJQUFJLENBQUN5QixPQUFMLEdBQWUsQ0FBQ0osUUFBRCxDQUFmLEdBQTRCckIsSUFBSSxDQUFDSSxDQUFqRDtBQUVBLFlBQU1aLElBQUksQ0FBQ1EsSUFBRCxFQUFPLENBQUMsR0FBR08sS0FBSixFQUFXLEdBQUdrQixPQUFkLENBQVAsQ0FBVjtBQUNELEtBWEQsQ0FUSixFQXFCSXpCLElBQUksQ0FBQzBCLFVBQUwsSUFBbUIsR0FyQnZCO0FBdUJFO0FBdkJGLEtBd0JHUixFQXhCSCxDQXdCTSxPQXhCTixFQXdCZ0JTLEdBQUQsSUFBU3BDLE1BQU0sQ0FBQ3FDLEtBQVAsQ0FBYUQsR0FBYixDQXhCeEIsQ0FERjtBQTJCRDs7QUFyQ1ksQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJ2xvZGFzaC5kZWJvdW5jZSc7XG5cbmltcG9ydCB3YXRjaCBmcm9tICcuL2Nob2tpZGFyJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4uLy4uL2xvZ2dlcic7XG5pbXBvcnQgZXNsaW50IGZyb20gJy4uLy4uL2VzbGludCc7XG5pbXBvcnQga2V5IGZyb20gJy4va2V5LWxpc3RlbmVyJztcbmltcG9ydCBjbGVhciBmcm9tICcuLi8uLi9jb21tYW5kcy9jbGVhcic7XG5pbXBvcnQgY2xpIGZyb20gJy4uLy4uL2NsaS9vcHRpb25zJztcblxuY29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKCdldmVudHM6d2F0Y2gnKTtcblxuYXN5bmMgZnVuY3Rpb24gbGludChvcHRpb25zID0ge30sIGVzbGludEFyZ3MgPSBbXSkge1xuICBpZiAob3B0aW9ucy5jbGVhcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgbG9nZ2VyLmxvZyhjbGVhci5ydW4oKSk7XG4gIH1cblxuICBhd2FpdCBlc2xpbnQubGludChlc2xpbnRBcmdzLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBsaXN0ZW4ob3B0cykge1xuICAgIGNvbnN0IHdhdGNoZXIgPSB3YXRjaC5jcmVhdGVXYXRjaGVyKG9wdHMuXywgeyBpZ25vcmVkOiBvcHRzLndhdGNoSWdub3JlIH0pO1xuICAgIGNvbnN0IHsgZmxhZ3MsIGRpcnMgfSA9IGNsaS5nZXRDbGkob3B0cyk7XG4gICAgY29uc3QgY2FjaGVMb2NhdGlvbiA9IHBhdGgucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSwgcGF0aC5yZXNvbHZlKG9wdHMuY2FjaGVMb2NhdGlvbiB8fCAnLmVzbGludGNhY2hlJykpO1xuXG4gICAga2V5Lmxpc3RlbihbJ2VudGVyJ10sIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGxpbnQob3B0cywgWy4uLmZsYWdzLCAuLi5kaXJzXSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgd2F0Y2hlclxuICAgICAgICAub24oJ3JlYWR5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnUmVhZHknKTtcbiAgICAgICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uZGlyc10pO1xuICAgICAgICB9KVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAub24oJ2FkZCcsIChkaXIpID0+IGxvZ2dlci5kZWJ1ZyhgJHtkaXJ9IGFkZGVkLmApKVxuICAgICAgICAub24oXG4gICAgICAgICAgJ2NoYW5nZScsXG4gICAgICAgICAgZGVib3VuY2UoYXN5bmMgKGZpbGVQYXRoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2FjaGVMb2NhdGlvbiA9PT0gZmlsZVBhdGgpIHJldHVybjtcbiAgICAgICAgICAgIGlmICghb3B0cy5leHQuaW5jbHVkZXMocGF0aC5leHRuYW1lKGZpbGVQYXRoKSkpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBXYXRjaDogU2tpcHBpbmcgJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0RldGVjdGVkIGNoYW5nZTonLCBmaWxlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gb3B0cy5jaGFuZ2VkID8gW2ZpbGVQYXRoXSA6IG9wdHMuXztcblxuICAgICAgICAgICAgYXdhaXQgbGludChvcHRzLCBbLi4uZmxhZ3MsIC4uLmNoYW5nZWRdKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBvcHRzLndhdGNoRGVsYXkgfHwgMzAwXG4gICAgICAgIClcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IGxvZ2dlci5lcnJvcihlcnIpKVxuICAgICk7XG4gIH0sXG59O1xuIl19